{"ast":null,"code":"import _regeneratorRuntime from \"D:/Prasanth/CCBC2/611 - Adoption of Cloud Computing and Blockchain/TelecomProject/Telcom_GitRepo/Tfq_GitRepo/app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport { accountSchema, blockSchema, feeHistorySchema, logSchema, transactionReceiptSchema, accessListResultSchema, SignatureObjectSchema } from './schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport var getProtocolVersion = function getProtocolVersion(web3Context) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", ethRpcMethods.getProtocolVersion(web3Context.requestManager));\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n};\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport var isSyncing = function isSyncing(web3Context) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", ethRpcMethods.getSyncing(web3Context.requestManager));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n};\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport var getCoinbase = function getCoinbase(web3Context) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", ethRpcMethods.getCoinbase(web3Context.requestManager));\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n};\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport var isMining = function isMining(web3Context) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", ethRpcMethods.getMining(web3Context.requestManager));\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n};\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return ethRpcMethods.getHashRate(web3Context.requestManager);\n        case 2:\n          response = _context5.sent;\n          return _context5.abrupt(\"return\", format({\n            format: 'uint'\n          }, response, returnFormat));\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return ethRpcMethods.getGasPrice(web3Context.requestManager);\n        case 2:\n          response = _context6.sent;\n          return _context6.abrupt(\"return\", format({\n            format: 'uint'\n          }, response, returnFormat));\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return ethRpcMethods.getBlockNumber(web3Context.requestManager);\n        case 2:\n          response = _context7.sent;\n          return _context7.abrupt(\"return\", format({\n            format: 'uint'\n          }, response, returnFormat));\n        case 4:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBalance(web3Context, address) {\n  var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n    var blockNumberFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n            format: 'uint'\n          }, blockNumber, ETH_DATA_FORMAT);\n          _context8.next = 3;\n          return ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n        case 3:\n          response = _context8.sent;\n          return _context8.abrupt(\"return\", format({\n            format: 'uint'\n          }, response, returnFormat));\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getStorageAt(web3Context, address, storageSlot) {\n  var blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n    var storageSlotFormatted, blockNumberFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          storageSlotFormatted = format({\n            format: 'uint'\n          }, storageSlot, ETH_DATA_FORMAT);\n          blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n            format: 'uint'\n          }, blockNumber, ETH_DATA_FORMAT);\n          _context9.next = 4;\n          return ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n        case 4:\n          response = _context9.sent;\n          return _context9.abrupt(\"return\", format({\n            format: 'bytes'\n          }, response, returnFormat));\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getCode(web3Context, address) {\n  var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n    var blockNumberFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n            format: 'uint'\n          }, blockNumber, ETH_DATA_FORMAT);\n          _context10.next = 3;\n          return ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n        case 3:\n          response = _context10.sent;\n          return _context10.abrupt(\"return\", format({\n            format: 'bytes'\n          }, response, returnFormat));\n        case 5:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlock(web3Context) {\n  var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  var hydrated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n    var response, blockHashFormatted, blockNumberFormatted;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          if (!isBytes(block)) {\n            _context11.next = 7;\n            break;\n          }\n          blockHashFormatted = format({\n            format: 'bytes32'\n          }, block, ETH_DATA_FORMAT);\n          _context11.next = 4;\n          return ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n        case 4:\n          response = _context11.sent;\n          _context11.next = 11;\n          break;\n        case 7:\n          blockNumberFormatted = isBlockTag(block) ? block : format({\n            format: 'uint'\n          }, block, ETH_DATA_FORMAT);\n          _context11.next = 10;\n          return ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n        case 10:\n          response = _context11.sent;\n        case 11:\n          return _context11.abrupt(\"return\", format(blockSchema, response, returnFormat));\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockTransactionCount(web3Context) {\n  var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n    var response, blockHashFormatted, blockNumberFormatted;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          if (!isBytes(block)) {\n            _context12.next = 7;\n            break;\n          }\n          blockHashFormatted = format({\n            format: 'bytes32'\n          }, block, ETH_DATA_FORMAT);\n          _context12.next = 4;\n          return ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n        case 4:\n          response = _context12.sent;\n          _context12.next = 11;\n          break;\n        case 7:\n          blockNumberFormatted = isBlockTag(block) ? block : format({\n            format: 'uint'\n          }, block, ETH_DATA_FORMAT);\n          _context12.next = 10;\n          return ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n        case 10:\n          response = _context12.sent;\n        case 11:\n          return _context12.abrupt(\"return\", format({\n            format: 'uint'\n          }, response, returnFormat));\n        case 12:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockUncleCount(web3Context) {\n  var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n    var response, blockHashFormatted, blockNumberFormatted;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          if (!isBytes(block)) {\n            _context13.next = 7;\n            break;\n          }\n          blockHashFormatted = format({\n            format: 'bytes32'\n          }, block, ETH_DATA_FORMAT);\n          _context13.next = 4;\n          return ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n        case 4:\n          response = _context13.sent;\n          _context13.next = 11;\n          break;\n        case 7:\n          blockNumberFormatted = isBlockTag(block) ? block : format({\n            format: 'uint'\n          }, block, ETH_DATA_FORMAT);\n          _context13.next = 10;\n          return ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n        case 10:\n          response = _context13.sent;\n        case 11:\n          return _context13.abrupt(\"return\", format({\n            format: 'uint'\n          }, response, returnFormat));\n        case 12:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getUncle(web3Context) {\n  var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  var uncleIndex = arguments.length > 2 ? arguments[2] : undefined;\n  var returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n    var uncleIndexFormatted, response, blockHashFormatted, blockNumberFormatted;\n    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          uncleIndexFormatted = format({\n            format: 'uint'\n          }, uncleIndex, ETH_DATA_FORMAT);\n          if (!isBytes(block)) {\n            _context14.next = 8;\n            break;\n          }\n          blockHashFormatted = format({\n            format: 'bytes32'\n          }, block, ETH_DATA_FORMAT);\n          _context14.next = 5;\n          return ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n        case 5:\n          response = _context14.sent;\n          _context14.next = 12;\n          break;\n        case 8:\n          blockNumberFormatted = isBlockTag(block) ? block : format({\n            format: 'uint'\n          }, block, ETH_DATA_FORMAT);\n          _context14.next = 11;\n          return ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n        case 11:\n          response = _context14.sent;\n        case 12:\n          return _context14.abrupt(\"return\", format(blockSchema, response, returnFormat));\n        case 13:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee14);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransaction(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n    var transactionHashFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n      while (1) switch (_context15.prev = _context15.next) {\n        case 0:\n          transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, DEFAULT_RETURN_FORMAT);\n          _context15.next = 3;\n          return ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n        case 3:\n          response = _context15.sent;\n          return _context15.abrupt(\"return\", isNullish(response) ? response : formatTransaction(response, returnFormat, {\n            fillInputAndData: true\n          }));\n        case 5:\n        case \"end\":\n          return _context15.stop();\n      }\n    }, _callee15);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n        case 2:\n          response = _context16.sent;\n          return _context16.abrupt(\"return\", response.map(function (transaction) {\n            return formatTransaction(transaction, returnFormat, {\n              fillInputAndData: true\n            });\n          }));\n        case 4:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee16);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionFromBlock(web3Context) {\n  var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  var transactionIndex = arguments.length > 2 ? arguments[2] : undefined;\n  var returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n    var transactionIndexFormatted, response, blockHashFormatted, blockNumberFormatted;\n    return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          transactionIndexFormatted = format({\n            format: 'uint'\n          }, transactionIndex, ETH_DATA_FORMAT);\n          if (!isBytes(block)) {\n            _context17.next = 8;\n            break;\n          }\n          blockHashFormatted = format({\n            format: 'bytes32'\n          }, block, ETH_DATA_FORMAT);\n          _context17.next = 5;\n          return ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n        case 5:\n          response = _context17.sent;\n          _context17.next = 12;\n          break;\n        case 8:\n          blockNumberFormatted = isBlockTag(block) ? block : format({\n            format: 'uint'\n          }, block, ETH_DATA_FORMAT);\n          _context17.next = 11;\n          return ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n        case 11:\n          response = _context17.sent;\n        case 12:\n          return _context17.abrupt(\"return\", isNullish(response) ? response : formatTransaction(response, returnFormat, {\n            fillInputAndData: true\n          }));\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee17);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n    var transactionHashFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, DEFAULT_RETURN_FORMAT);\n          _context18.next = 3;\n          return ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n        case 3:\n          response = _context18.sent;\n          return _context18.abrupt(\"return\", isNullish(response) ? response : format(transactionReceiptSchema, response, returnFormat));\n        case 5:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee18);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionCount(web3Context, address) {\n  var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n    var blockNumberFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n            format: 'uint'\n          }, blockNumber, ETH_DATA_FORMAT);\n          _context19.next = 3;\n          return ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n        case 3:\n          response = _context19.sent;\n          return _context19.abrupt(\"return\", format({\n            format: 'uint'\n          }, response, returnFormat));\n        case 5:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee19);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction(web3Context, transaction, returnFormat) {\n  var _this = this;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  var promiEvent = new Web3PromiEvent(function (resolve, reject) {\n    setImmediate(function () {\n      (function () {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n          var sendTxHelper, transactionFormatted, wallet, transactionHash, transactionHashFormatted, transactionReceipt, transactionReceiptFormatted;\n          return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n            while (1) switch (_context20.prev = _context20.next) {\n              case 0:\n                sendTxHelper = new SendTxHelper({\n                  web3Context: web3Context,\n                  promiEvent: promiEvent,\n                  options: options,\n                  returnFormat: returnFormat\n                });\n                transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), {\n                  from: getTransactionFromOrToAttr('from', web3Context, transaction),\n                  to: getTransactionFromOrToAttr('to', web3Context, transaction)\n                }), ETH_DATA_FORMAT);\n                _context20.prev = 2;\n                _context20.next = 5;\n                return sendTxHelper.populateGasPrice({\n                  transaction: transaction,\n                  transactionFormatted: transactionFormatted\n                });\n              case 5:\n                transactionFormatted = _context20.sent;\n                _context20.next = 8;\n                return sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n              case 8:\n                sendTxHelper.emitSending(transactionFormatted);\n                if (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n                  wallet = web3Context.wallet.get(transactionFormatted.from);\n                }\n                _context20.next = 12;\n                return sendTxHelper.signAndSend({\n                  wallet: wallet,\n                  tx: transactionFormatted\n                });\n              case 12:\n                transactionHash = _context20.sent;\n                transactionHashFormatted = format({\n                  format: 'bytes32'\n                }, transactionHash, returnFormat);\n                sendTxHelper.emitSent(transactionFormatted);\n                sendTxHelper.emitTransactionHash(transactionHashFormatted);\n                _context20.next = 18;\n                return waitForTransactionReceipt(web3Context, transactionHash, returnFormat);\n              case 18:\n                transactionReceipt = _context20.sent;\n                transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat));\n                sendTxHelper.emitReceipt(transactionReceiptFormatted);\n                _context20.t0 = resolve;\n                _context20.next = 24;\n                return sendTxHelper.handleResolve({\n                  receipt: transactionReceiptFormatted,\n                  tx: transactionFormatted\n                });\n              case 24:\n                _context20.t1 = _context20.sent;\n                (0, _context20.t0)(_context20.t1);\n                sendTxHelper.emitConfirmation({\n                  receipt: transactionReceiptFormatted,\n                  transactionHash: transactionHash\n                });\n                _context20.next = 36;\n                break;\n              case 29:\n                _context20.prev = 29;\n                _context20.t2 = _context20[\"catch\"](2);\n                _context20.t3 = reject;\n                _context20.next = 34;\n                return sendTxHelper.handleError({\n                  error: _context20.t2,\n                  tx: transactionFormatted\n                });\n              case 34:\n                _context20.t4 = _context20.sent;\n                (0, _context20.t3)(_context20.t4);\n              case 36:\n              case \"end\":\n                return _context20.stop();\n            }\n          }, _callee20, null, [[2, 29]]);\n        }));\n      })();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction(web3Context, signedTransaction, returnFormat) {\n  var _this2 = this;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  var promiEvent = new Web3PromiEvent(function (resolve, reject) {\n    setImmediate(function () {\n      (function () {\n        return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n          var _this3 = this;\n          var sendTxHelper, signedTransactionFormattedHex, unSerializedTransaction, unSerializedTransactionWithFrom, v, r, s, txWithoutSigParams, transactionHash, transactionHashFormatted, transactionReceipt, transactionReceiptFormatted;\n          return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n            while (1) switch (_context22.prev = _context22.next) {\n              case 0:\n                sendTxHelper = new SendTxHelper({\n                  web3Context: web3Context,\n                  promiEvent: promiEvent,\n                  options: options,\n                  returnFormat: returnFormat\n                }); // Formatting signedTransaction to be send to RPC endpoint\n                signedTransactionFormattedHex = format({\n                  format: 'bytes'\n                }, signedTransaction, ETH_DATA_FORMAT);\n                unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes(signedTransactionFormattedHex)));\n                unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n                  // Some providers will default `from` to address(0) causing the error\n                  // reported from `eth_call` to not be the reason the user's tx failed\n                  // e.g. `eth_call` will return an Out of Gas error for a failed\n                  // smart contract execution contract, because the sender, address(0),\n                  // has no balance to pay for the gas of the transaction execution\n                  from: unSerializedTransaction.getSenderAddress().toString()\n                });\n                _context22.prev = 4;\n                v = unSerializedTransactionWithFrom.v, r = unSerializedTransactionWithFrom.r, s = unSerializedTransactionWithFrom.s, txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n                _context22.next = 8;\n                return sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n              case 8:\n                sendTxHelper.emitSending(signedTransactionFormattedHex);\n                _context22.next = 11;\n                return trySendTransaction(web3Context, function () {\n                  return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n                    return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n                      while (1) switch (_context21.prev = _context21.next) {\n                        case 0:\n                          return _context21.abrupt(\"return\", ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex));\n                        case 1:\n                        case \"end\":\n                          return _context21.stop();\n                      }\n                    }, _callee21);\n                  }));\n                });\n              case 11:\n                transactionHash = _context22.sent;\n                sendTxHelper.emitSent(signedTransactionFormattedHex);\n                transactionHashFormatted = format({\n                  format: 'bytes32'\n                }, transactionHash, returnFormat);\n                sendTxHelper.emitTransactionHash(transactionHashFormatted);\n                _context22.next = 17;\n                return waitForTransactionReceipt(web3Context, transactionHash, returnFormat);\n              case 17:\n                transactionReceipt = _context22.sent;\n                transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat));\n                sendTxHelper.emitReceipt(transactionReceiptFormatted);\n                _context22.t0 = resolve;\n                _context22.next = 23;\n                return sendTxHelper.handleResolve({\n                  receipt: transactionReceiptFormatted,\n                  tx: unSerializedTransactionWithFrom\n                });\n              case 23:\n                _context22.t1 = _context22.sent;\n                (0, _context22.t0)(_context22.t1);\n                sendTxHelper.emitConfirmation({\n                  receipt: transactionReceiptFormatted,\n                  transactionHash: transactionHash\n                });\n                _context22.next = 35;\n                break;\n              case 28:\n                _context22.prev = 28;\n                _context22.t2 = _context22[\"catch\"](4);\n                _context22.t3 = reject;\n                _context22.next = 33;\n                return sendTxHelper.handleError({\n                  error: _context22.t2,\n                  tx: unSerializedTransactionWithFrom\n                });\n              case 33:\n                _context22.t4 = _context22.sent;\n                (0, _context22.t3)(_context22.t4);\n              case 35:\n              case \"end\":\n                return _context22.stop();\n            }\n          }, _callee22, null, [[4, 28]]);\n        }));\n      })();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sign(web3Context, message, addressOrIndex, returnFormat) {\n  var _a;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n    var messageFormatted, wallet, signed, response;\n    return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n      while (1) switch (_context23.prev = _context23.next) {\n        case 0:\n          messageFormatted = format({\n            format: 'bytes'\n          }, message, DEFAULT_RETURN_FORMAT);\n          if (!((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex))) {\n            _context23.next = 5;\n            break;\n          }\n          wallet = web3Context.wallet.get(addressOrIndex);\n          signed = wallet.sign(messageFormatted);\n          return _context23.abrupt(\"return\", format(SignatureObjectSchema, signed, returnFormat));\n        case 5:\n          if (!(typeof addressOrIndex === 'number')) {\n            _context23.next = 7;\n            break;\n          }\n          throw new SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n        case 7:\n          _context23.next = 9;\n          return ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n        case 9:\n          response = _context23.sent;\n          return _context23.abrupt(\"return\", format({\n            format: 'bytes'\n          }, response, returnFormat));\n        case 11:\n        case \"end\":\n          return _context23.stop();\n      }\n    }, _callee23);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTransaction(web3Context, transaction, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n      while (1) switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return ethRpcMethods.signTransaction(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT));\n        case 2:\n          response = _context24.sent;\n          return _context24.abrupt(\"return\", isString(response) ? decodeSignedTransaction(response, returnFormat, {\n            fillInputAndData: true\n          }) : {\n            raw: format({\n              format: 'bytes'\n            }, response.raw, returnFormat),\n            tx: formatTransaction(response.tx, returnFormat, {\n              fillInputAndData: true\n            })\n          });\n        case 4:\n        case \"end\":\n          return _context24.stop();\n      }\n    }, _callee24);\n  }));\n}\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function call(web3Context, transaction) {\n  var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n    var blockNumberFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n      while (1) switch (_context25.prev = _context25.next) {\n        case 0:\n          blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n            format: 'uint'\n          }, blockNumber, ETH_DATA_FORMAT);\n          _context25.next = 3;\n          return ethRpcMethods.call(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n        case 3:\n          response = _context25.sent;\n          return _context25.abrupt(\"return\", format({\n            format: 'bytes'\n          }, response, returnFormat));\n        case 5:\n        case \"end\":\n          return _context25.stop();\n      }\n    }, _callee25);\n  }));\n}\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function estimateGas(web3Context, transaction) {\n  var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n    var transactionFormatted, blockNumberFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n      while (1) switch (_context26.prev = _context26.next) {\n        case 0:\n          transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n          blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n            format: 'uint'\n          }, blockNumber, ETH_DATA_FORMAT);\n          _context26.next = 4;\n          return ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n        case 4:\n          response = _context26.sent;\n          return _context26.abrupt(\"return\", format({\n            format: 'uint'\n          }, response, returnFormat));\n        case 6:\n        case \"end\":\n          return _context26.stop();\n      }\n    }, _callee26);\n  }));\n}\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n    var toBlock, fromBlock, formattedFilter, response, result;\n    return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n      while (1) switch (_context27.prev = _context27.next) {\n        case 0:\n          // format type bigint or number toBlock and fromBlock to hexstring.\n          toBlock = filter.toBlock, fromBlock = filter.fromBlock;\n          if (!isNullish(toBlock)) {\n            if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n              toBlock = numberToHex(toBlock);\n            }\n          }\n          if (!isNullish(fromBlock)) {\n            if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n              fromBlock = numberToHex(fromBlock);\n            }\n          }\n          formattedFilter = Object.assign(Object.assign({}, filter), {\n            fromBlock: fromBlock,\n            toBlock: toBlock\n          });\n          _context27.next = 6;\n          return ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n        case 6:\n          response = _context27.sent;\n          result = response.map(function (res) {\n            if (typeof res === 'string') {\n              return res;\n            }\n            return format(logSchema, res, returnFormat);\n          });\n          return _context27.abrupt(\"return\", result);\n        case 9:\n        case \"end\":\n          return _context27.stop();\n      }\n    }, _callee27);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n      while (1) switch (_context28.prev = _context28.next) {\n        case 0:\n          _context28.next = 2;\n          return ethRpcMethods.getChainId(web3Context.requestManager);\n        case 2:\n          response = _context28.sent;\n          return _context28.abrupt(\"return\", format({\n            format: 'uint'\n          },\n          // Response is number in hex formatted string\n          response, returnFormat));\n        case 4:\n        case \"end\":\n          return _context28.stop();\n      }\n    }, _callee28);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getProof(web3Context, address, storageKeys) {\n  var blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n    var storageKeysFormatted, blockNumberFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n      while (1) switch (_context29.prev = _context29.next) {\n        case 0:\n          storageKeysFormatted = storageKeys.map(function (storageKey) {\n            return format({\n              format: 'bytes'\n            }, storageKey, ETH_DATA_FORMAT);\n          });\n          blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n            format: 'uint'\n          }, blockNumber, ETH_DATA_FORMAT);\n          _context29.next = 4;\n          return ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n        case 4:\n          response = _context29.sent;\n          return _context29.abrupt(\"return\", format(accountSchema, response, returnFormat));\n        case 6:\n        case \"end\":\n          return _context29.stop();\n      }\n    }, _callee29);\n  }));\n}\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getFeeHistory(web3Context, blockCount) {\n  var newestBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  var rewardPercentiles = arguments.length > 3 ? arguments[3] : undefined;\n  var returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n    var blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n      while (1) switch (_context30.prev = _context30.next) {\n        case 0:\n          blockCountFormatted = format({\n            format: 'uint'\n          }, blockCount, ETH_DATA_FORMAT);\n          newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({\n            format: 'uint'\n          }, newestBlock, ETH_DATA_FORMAT);\n          rewardPercentilesFormatted = format({\n            type: 'array',\n            items: {\n              format: 'uint'\n            }\n          }, rewardPercentiles, NUMBER_DATA_FORMAT);\n          _context30.next = 5;\n          return ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n        case 5:\n          response = _context30.sent;\n          return _context30.abrupt(\"return\", format(feeHistorySchema, response, returnFormat));\n        case 7:\n        case \"end\":\n          return _context30.stop();\n      }\n    }, _callee30);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function createAccessList(web3Context, transaction) {\n  var blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  var returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n    var blockNumberFormatted, response;\n    return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n      while (1) switch (_context31.prev = _context31.next) {\n        case 0:\n          blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n            format: 'uint'\n          }, blockNumber, ETH_DATA_FORMAT);\n          _context31.next = 3;\n          return ethRpcMethods.createAccessList(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n        case 3:\n          response = _context31.sent;\n          return _context31.abrupt(\"return\", format(accessListResultSchema, response, returnFormat));\n        case 5:\n        case \"end\":\n          return _context31.stop();\n      }\n    }, _callee31);\n  }));\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n      while (1) switch (_context32.prev = _context32.next) {\n        case 0:\n          _context32.next = 2;\n          return ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n        case 2:\n          response = _context32.sent;\n          return _context32.abrupt(\"return\", format({\n            format: 'bytes'\n          }, response, returnFormat));\n        case 4:\n        case \"end\":\n          return _context32.stop();\n      }\n    }, _callee32);\n  }));\n}","map":{"version":3,"names":["ETH_DATA_FORMAT","DEFAULT_RETURN_FORMAT","Web3PromiEvent","format","hexToBytes","bytesToUint8Array","numberToHex","TransactionFactory","isBlockTag","isBytes","isNullish","isString","SignatureError","ethRpcMethods","decodeSignedTransaction","accountSchema","blockSchema","feeHistorySchema","logSchema","transactionReceiptSchema","accessListResultSchema","SignatureObjectSchema","getTransactionFromOrToAttr","formatTransaction","trySendTransaction","waitForTransactionReceipt","NUMBER_DATA_FORMAT","SendTxHelper","getProtocolVersion","web3Context","__awaiter","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","requestManager","stop","isSyncing","_callee2","_callee2$","_context2","getSyncing","getCoinbase","_callee3","_callee3$","_context3","isMining","_callee4","_callee4$","_context4","getMining","getHashRate","returnFormat","response","_context5","sent","_callee5","getGasPrice","_context6","_callee6","getBlockNumber","_context7","_callee7","getBalance","address","blockNumber","arguments","length","undefined","defaultBlock","blockNumberFormatted","_context8","_callee8","getStorageAt","storageSlot","storageSlotFormatted","_context9","_callee9","getCode","_context10","_callee10","getBlock","block","hydrated","_context11","blockHashFormatted","getBlockByHash","getBlockByNumber","_callee11","getBlockTransactionCount","_context12","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","_callee12","getBlockUncleCount","_context13","getUncleCountByBlockHash","getUncleCountByBlockNumber","_callee13","getUncle","uncleIndex","uncleIndexFormatted","_context14","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","_callee14","getTransaction","transactionHash","transactionHashFormatted","_context15","getTransactionByHash","fillInputAndData","_callee15","getPendingTransactions","_context16","map","transaction","_callee16","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","_context17","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","_callee17","getTransactionReceipt","_context18","_callee18","getTransactionCount","_context19","_callee19","sendTransaction","_this","options","checkRevertBeforeSending","promiEvent","resolve","reject","setImmediate","_callee20","sendTxHelper","transactionFormatted","wallet","transactionReceipt","transactionReceiptFormatted","_callee20$","_context20","Object","assign","from","to","populateGasPrice","emitSending","get","signAndSend","tx","emitSent","emitTransactionHash","getReceiptWithEvents","emitReceipt","t0","handleResolve","receipt","t1","emitConfirmation","t2","t3","handleError","error","t4","sendSignedTransaction","signedTransaction","_this2","_callee22","_this3","signedTransactionFormattedHex","unSerializedTransaction","unSerializedTransactionWithFrom","v","r","s","txWithoutSigParams","_callee22$","_context22","fromSerializedData","toJSON","getSenderAddress","toString","__rest","_callee21","_callee21$","_context21","sendRawTransaction","sign","message","addressOrIndex","messageFormatted","_a","_context23","signed","_callee23","signTransaction","_context24","raw","_callee24","call","_context25","_callee25","estimateGas","_context26","_callee26","getLogs","filter","toBlock","fromBlock","formattedFilter","_context27","result","res","_callee27","getChainId","_context28","_callee28","getProof","storageKeys","storageKeysFormatted","storageKey","_context29","_callee29","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","_context30","_callee30","createAccessList","_context31","_callee31","signTypedData","typedData","useLegacy","_context32","_callee32"],"sources":["D:\\Prasanth\\CCBC2\\611 - Adoption of Cloud Computing and Blockchain\\TelecomProject\\Telcom_GitRepo\\Tfq_GitRepo\\app\\node_modules\\web3-eth\\src\\rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n\tEip712TypedData,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { fillInputAndData: true });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(transaction as unknown as Transaction, returnFormat, {\n\t\t\tfillInputAndData: true,\n\t\t}),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { fillInputAndData: true });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionReceipt(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: (format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat,\n\t\t  ) as TransactionReceipt);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet transactionFormatted:\n\t\t\t\t\t\t| Transaction\n\t\t\t\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithFromAndToLocalWalletIndex = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttransactionFormatted = await sendTxHelper.populateGasPrice({\n\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(transactionFormatted);\n\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(\n\t\t\t\t\t\t\t\t(transactionFormatted as Transaction).from as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash: HexString = await sendTxHelper.signAndSend({\n\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\ttx: transactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsendTxHelper.emitSent(transactionFormatted);\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { v , r , s, \n\t\t\t\t\t\t\t\t...txWithoutSigParams} = unSerializedTransactionWithFrom;\n\t\t\t\t\t\t\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttxWithoutSigParams as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSent(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  })\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat, {\n\t\t\t\t\tfillInputAndData: true,\n\t\t\t\t}),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(logSchema, res as unknown as Log, returnFormat);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(accountSchema, response as unknown as AccountObject, returnFormat);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(feeHistorySchema, response as unknown as FeeHistory, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(accessListResultSchema, response, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTypedData<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy: boolean,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTypedData(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\ttypedData,\n\t\tuseLegacy,\n\t);\n\n\treturn format({ format: 'bytes' }, response, returnFormat);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}